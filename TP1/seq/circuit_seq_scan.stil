STIL 1.0 { Design 2005; }
Header {
   Title "  TetraMAX (TM)  H-2013.03-SP5-i131018_232903 STIL output";
   Date "Mon Nov 18 15:44:45 2013";
   History {
      Ann {*     Uncollapsed Stuck Fault Summary Report *}
      Ann {* ----------------------------------------------- *}
      Ann {* fault class                     code   #faults *}
      Ann {* ------------------------------  ----  --------- *}
      Ann {* Detected                         DT         32 *}
      Ann {* Possibly detected                PT          0 *}
      Ann {* Undetectable                     UD          0 *}
      Ann {* ATPG untestable                  AU          2 *}
      Ann {* Not detected                     ND          4 *}
      Ann {* ----------------------------------------------- *}
      Ann {* total faults                                38 *}
      Ann {* test coverage                            84.21% *}
      Ann {* fault coverage                           84.21% *}
      Ann {* ----------------------------------------------- *}
      Ann {*  *}
      Ann {*            Pattern Summary Report *}
      Ann {* ----------------------------------------------- *}
      Ann {* #internal patterns                           6 *}
      Ann {*     #fast_sequential patterns                6 *}
      Ann {* ----------------------------------------------- *}
      Ann {*  *}
      Ann {* There are no rule fails *}
      Ann {* clock_name        off  usage *}
      Ann {* ----------------  ---  -------------------------- *}
      Ann {* ck                 0   nonscan_DFF  *}
      Ann {*  *}
      Ann {* There are no constraint ports *}
      Ann {* There are no equivalent pins *}
      Ann {* There are no net connections *}
      Ann {* Unified STIL Flow *}
      Ann {* serial_flag = 0 *}
   }
}
Signals {
   "a" In; "b" In; "ck" In; "s" Out;
}
SignalGroups {
   "_pi" = '"a" + "b" + "ck"'; // #signals=3
   "_in" = '"a" + "b" + "ck"'; // #signals=3
   "_default_Out_Timing_" = '"s"'; // #signals=1
   "_po" = '"s"'; // #signals=1
   "_out" = '"s"'; // #signals=1
}
Timing {
   WaveformTable "_default_WFT_" {
      Period '100ns';
      Waveforms {
         "a" { 0 { '0ns' D; } }
         "a" { 1 { '0ns' U; } }
         "a" { Z { '0ns' Z; } }
         "b" { 0 { '0ns' D; } }
         "b" { 1 { '0ns' U; } }
         "b" { Z { '0ns' Z; } }
         "ck" { 0 { '0ns' D; } }
         "ck" { P { '0ns' D; '50ns' U; '80ns' D; } }
         "ck" { 1 { '0ns' U; } }
         "ck" { Z { '0ns' Z; } }
         "_default_Out_Timing_" { X { '0ns' X; } }
         "_default_Out_Timing_" { H { '0ns' X; '40ns' H; } }
         "_default_Out_Timing_" { T { '0ns' X; '40ns' T; } }
         "_default_Out_Timing_" { L { '0ns' X; '40ns' L; } }
      }
   }
}
ScanStructures {
   // Uncomment and modify the following to suit your design
   // ScanChain "chain_name" { ScanIn "chain_input_name"; ScanOut "chain_output_name"; }
}
PatternBurst "_burst_" {
   PatList { "_pattern_" {
   }
}}
PatternExec {
   PatternBurst "_burst_";
}
Procedures {
   "capture" {
      W "_default_WFT_";
      C { "ck"=0; "b"=0; "a"=0; }
      "forcePI": V { "_pi"=###; "_po"=X; }
      "measurePO": V { "_po"=#; }
   }
   "capture_ck" {
      W "_default_WFT_";
      C { "ck"=0; "b"=0; "a"=0; }
      "forcePI": V { "_pi"=###; "_po"=X; }
      "measurePO": V { "_po"=#; }
      "pulse": V { "ck"=P; "_po"=X; }
   }
   // Uncomment and modify the following to suit your design
   // load_unload {
      // V { "ck" = 0; } // force clocks off and scan enable pins active
      // Shift { V { _si=#; _so=#; "ck" = P; }} // pulse shift clocks
   // }
}
MacroDefs {
   "test_setup" {
      W "_default_WFT_";
      V { "ck"=0; }
   }
}
Pattern "_pattern_" {
   W "_default_WFT_";
   "precondition all Signals": C { "_pi"=000; "_po"=X; }
   Macro "test_setup";
   Ann {* fast_sequential *}
   "pattern 0": Call "capture_ck" { 
      "_pi"=000; }
   Call "capture" { 
      "_pi"=110; "_po"=H; }
   Ann {* fast_sequential *}
   "pattern 1": Call "capture_ck" { 
      "_pi"=000; }
   Call "capture_ck" { 
      "_pi"=110; }
   Call "capture" { 
      "_pi"=100; "_po"=L; }
   Ann {* fast_sequential *}
   "pattern 2": Call "capture_ck" { 
      "_pi"=100; }
   Call "capture_ck" { 
      "_pi"=010; }
   Call "capture" { 
      "_pi"=010; "_po"=H; }
   Ann {* fast_sequential *}
   "pattern 3": Call "capture_ck" { 
      "_pi"=010; }
   Call "capture_ck" { 
      "_pi"=100; }
   Call "capture_ck" { 
      "_pi"=110; }
   Call "capture" { 
      "_pi"=010; "_po"=H; }
   Ann {* fast_sequential *}
   "pattern 4": Call "capture_ck" { 
      "_pi"=000; }
   Call "capture_ck" { 
      "_pi"=100; }
   Call "capture" { 
      "_pi"=010; "_po"=H; }
   Ann {* fast_sequential *}
   "pattern 5": Call "capture_ck" { 
      "_pi"=000; }
   Call "capture_ck" { 
      "_pi"=010; }
   Call "capture_ck" { 
      "_pi"=110; }
   Call "capture" { 
      "_pi"=100; "_po"=H; }
}

// Patterns reference 52 V statements, generating 52 test cycles
